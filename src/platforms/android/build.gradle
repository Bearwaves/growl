import java.nio.file.Paths

plugins {
    id 'com.android.application' version '8.7.0' apply true
    id 'com.android.library' version '8.7.0' apply false
}

// Load user's Growl properties if provided
def growlProperties = new Properties()
String growlProjectPath = ""
if (!project.hasProperty('growlProperties')) {
    throw new GradleException("Growl properties must be provided")
}
def growlPropertiesFile = file(project['growlProperties'])
if (!growlPropertiesFile.exists()) {
    throw new GradleException("Growl properties file not found at: ${project['growlProperties']}")
}
growlProperties.load(new FileInputStream(growlPropertiesFile as File))
growlProjectPath = growlPropertiesFile.parent

def keystoreProperties = new Properties()
if (growlProperties['keystore']) {
    def keystorePropertiesFile = file(Paths.get(growlProjectPath, growlProperties['keystore'] as String))
    if (!keystorePropertiesFile.exists()) {
        throw new GradleException("Keystore properties file not found at: ${growlProperties['keystore']}")
    }
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile as File))
}

dependencies {
    implementation libs.appcompat
    implementation libs.games.activity
    implementation libs.games.controller
    implementation libs.androidx.activity
    implementation libs.libcurl
    if (growlProperties['playServicesAppId']) {
        implementation libs.play.games.services
    }
}

// Prevent Kotlin library collisions.
configurations.implementation {
    exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib-jdk8'
}

android {
    namespace 'com.bearwaves.growl'
    compileSdk 34

    defaultConfig {
        applicationId growlProperties['appId'] as String
        minSdk 21
        targetSdk 34
        versionCode Integer.parseInt(growlProperties['versionCode'] as String)
        versionName growlProperties['versionName'] as String

        ndk {
            abiFilters "armeabi-v7a", "arm64-v8a"
        }

        externalNativeBuild {
            cmake {
                arguments "-DANDROID_STL=c++_shared"
            }
        }
    }

    androidResources {
        noCompress += "assets.growl"
    }

    sourceSets {
        main {
            java.srcDirs += ['../../plugins/android']
            if (growlProperties['assetsDir']) {
                assets.srcDirs += Paths.get(growlProjectPath, growlProperties['assetsDir'] as String) as String
            }
            if (growlProperties['resDir']) {
                res.srcDirs += Paths.get(growlProjectPath, growlProperties['resDir'] as String) as String
            }
            if (growlProperties['manifest']) {
                manifest.srcFile Paths.get(growlProjectPath, growlProperties['manifest'] as String) as String
            }
        }
    }

    if (growlProperties['keystore']) {
        signingConfigs {
            release {
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            if (growlProperties['keystore']) {
                signingConfig signingConfigs.release
            }
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildFeatures {
        prefab true
    }
    externalNativeBuild {
        cmake {
            if (growlProperties['cmakelists']) {
                path file(Paths.get(growlProjectPath, growlProperties['cmakelists'] as String) as String)
            } else {
                throw new GradleException("Growl property 'cmakelists' must be provided.")
            }
        }
    }
}